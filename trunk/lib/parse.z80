.nolist
;Copyright (c) 2009, Luc BRUANT aka fullmetalcoder.
;Redistribution and use in source and binary forms, with or without modification, are
;permitted provided that the following conditions are met:
;Redistributions of source code must retain the above copyright notice, this list of
;conditions and the following disclaimer.
;
;Redistributions in binary form must reproduce the above copyright notice, this list of
;conditions and the following disclaimer in the documentation and/or other materials
;provided with the distribution.
;
;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
;TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
;PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR
;CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
;OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.list

; brief : search for a string in a (zero terminated) list (of zero terminated string)
; input
;	hl : start of stringlist
;	de : start of string to find
; output
;	z if found, nz otherwise
;	bc : index of said string in list (if found)
; destroys : a, hl
vect_findstr:
	ld	b, 0
	ld	c, b
	
vect_findstr.res:
	push	de
	
vect_findstr.loop:
	ld	a, (de)
	cp	(hl)
	inc	de
	jr	nz, vect_findstr.next
	inc	hl
	or	a
	jr	nz, vect_findstr.loop
	
	; string found
	pop	de
	ret
	
vect_findstr.next:
	ld	a, (hl)
	inc	hl
	or	a
	jr	nz, vect_findstr.next
	
	; check for end of list
	ld	a, (hl)
	or	a
	jr	z, vect_findstr.notfound
	
	pop	de
	inc	bc
	jr	vect_findstr.res
	
vect_findstr.notfound:
	pop	de
	inc	a
	ret

; brief : turn "space separated" string into stringlist (nul terminated)
; input : hl -> buffer address
; output : a -> number of "tokens", hl -> address of first token
; destroys : none
vect_tokenize:
	push	de
	push	hl
	ld	d, 0
	
vect_tokenize.loop:
	ld	a, (hl)
	inc	hl
	or	a
	jr	z, vect_tokenize.end
	cp	' '
	jr	nz, vect_tokenize.loop
	
	ld	a, d
	or	a
	jr	nz, $+4
	pop	af
	push	hl
	
	; replace space separator with zero terminator
	dec	hl
	ld	(hl), 0
	inc	hl
	
	inc	d
	
	jr	vect_tokenize.loop
	
vect_tokenize.end:
	inc	d
	ld	a, d
	pop	hl
	pop	de
	ret
