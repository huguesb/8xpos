.nolist
; Copyright (c) 2009, Luc BRUANT aka fullmetalcoder.
;Redistribution and use in source and binary forms, with or without modification, are
;permitted provided that the following conditions are met:
;Redistributions of source code must retain the above copyright notice, this list of
;conditions and the following disclaimer.
;
;Redistributions in binary form must reproduce the above copyright notice, this list of
;conditions and the following disclaimer in the documentation and/or other materials
;provided with the distribution.
;
;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
;TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
;PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR
;CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
;OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.list

; a couple of ports are protected and require a precise instruction
; sequence to be properly written to (and that must be executed from
; a priviledged flash page
#define protPortWrite(port) di
#defcont			 \ nop
#defcont			 \ nop
#defcont			 \ im	1
#defcont			 \ di
#defcont			 \ out	(port), a

vect_flash_unlock:	.export vect_flash_unlock
	; bit of magic here to reenable interrupts only if they were disabled
	; ld a, i (and ld a,r) cause P/V to be set to IFF
	ld	a,i
	push	af
	
	di
	
	ld	a, 1
	protPortWrite(flash_lock_port)
	
	pop	af
	; po : interrupts were disabled before / pe : interrupts were enabled before
	ret	po
	
	ei
	ret

vect_flash_lock:	.export vect_flash_lock
	ld	a, i
	push	af
	
	di
	
	xor	a
	protPortWrite(flash_lock_port)
	
	pop	af
	ret	po
	
	ei
	ret

;protected ports are 14,16,22, and 23 - all Flash write/execution protection
;we allow execution on all Flash pages, then relock Flash
vect_flash_exec_init_se: .export vect_flash_exec_init_se
	di
	call	vect_flash_unlock
	
	;Set Flash execution lower limit
	
	ld	a, $FF
	protPortWrite(fxl_low_port)
	;Flash execution upper limit
	inc	a
	protPortWrite(fxl_high_port)
	
	; TIOS reportedly writes data to port $25, $26... ($10, $20 respectively)
	; the effect of these writes is not documented so...
	
	jp	vect_flash_lock
	
vect_flash_exec_init_be: .export vect_flash_exec_init_be
	di
	
	call	vect_flash_unlock
	
	; tricky flash execution enabling (untested)
	
	xor	a
	protPortWrite($05)
	protPortWrite(flash_exec_port)
	
	inc	a
	protPortWrite(flash_exec_port)
	xor	a
	protPortWrite(flash_exec_port)
	
	ld	a, 2
	protPortWrite($05)
	xor	a
	protPortWrite(flash_exec_port)
	
	jp	vect_flash_lock
