.nolist
; Copyright (c) 2009, Luc BRUANT aka fullmetalcoder.
;Redistribution and use in source and binary forms, with or without modification, are
;permitted provided that the following conditions are met:
;Redistributions of source code must retain the above copyright notice, this list of
;conditions and the following disclaimer.
;
;Redistributions in binary form must reproduce the above copyright notice, this list of
;conditions and the following disclaimer in the documentation and/or other materials
;provided with the distribution.
;
;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
;TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
;PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR
;CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
;OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.list

; bjump is just a bcall for which the stack entry keeoing the return address is discarded
compat.bjump:
	push	hl		; for ROM page
	;push	hl		; for return
	push	hl
	push	de
	push	af
; stack frame :
;		* sp +  0 : af
;		* sp +  2 : de
;		* sp +  4 : hl
;		* sp +  6 : room for os_func return address
;		* sp +  8 : return address / room for return page
	
	; get return address
	; note : going upwards in stack perspective, backwards in absolute addressing
	; -> bottom line : it "looks like" we're on a big endian system for a little while...
	ld	hl, 11	; 10
	add	hl, sp	; 11
	ld	d, (hl)	; 7
	dec	hl	; 6
	ld	e, (hl)	; 7
	inc	hl	; 6
	
	; go on (bcall and bjump share most of their code, they actually differ by two
	; instructions only... one less push and a dec vs an inc)
	jp	os_func_common

; Continuation of rst 28h : bcall code
;
; timing :
;	* pre : 65 T-states
;	* body : ~300- T-states (depends on call type, fastest is os call, slowest is multipage app call)
;	* post :115 T-states
;
;	-> total overhead : bcall = ~500-1000  / regular call = 17 -> more than 449 cycles wasted per call 
compat.bcall:
	push	hl		; for ROM page
	push	hl		; for return
	push	hl
	push	de
	push	af
; stack frame :
;		* sp +  0 : af
;		* sp +  2 : de
;		* sp +  4 : hl
;		* sp +  6 : room for os_func return address
;		* sp +  8 : room for return page
;		* sp + 10 : return address
	
	; get return address
	; note : going upwards in stack perspective, backwards in absolute addressing
	; -> bottom line : it "looks like" we're on a big endian system for a little while...
	ld	hl, 11	; 10
	add	hl, sp	; 11
	ld	d, (hl)	; 7
	dec	hl	; 6
	ld	e, (hl)	; 7
	dec	hl	; 6
	
os_func_common:
	; save the ROM page
	in	a, (map_bankA_port)	; 11
	ld	(hl), a	; 7
	dec	hl	; 6
	dec	hl	; 6
	
	; save os_func return address
	ld	(hl), msb(os_func_exit)	; 10
	dec	hl ; 6
	ld	(hl), lsb(os_func_exit)	; 10
	
	; get call vector address
	ex	de, hl	; 4
	ld	a, (hl)	; 7
	inc	hl	; 6
	ld	h, (hl)	; 7
	ld	l, a	; 4
	
	;call	__dump_hl
	
	; determine type of call (boot code, OS (emulation...) or multipage app)
	bit	7, h	; 8
	jp	nz, os_func.boot	; 10
	bit	6, h	; 8
	jp	z, os_func.multipage	; 10
	
	; only needed for TI OS binary compat (all)
	
	; compat layer goes in page 1
	ld	a, $01	; 7
	
	jp	os_func.go	; 10
	
os_func.multipage:
	; only needed for TI OS binary compat (APP only)
	
	; adjust vector address (swap on bank A : $4000-$8000)
	set	6, h	; 8
	
	; determine base app page
	in	a, (map_bankA_port)	; 11
	call	vect_getbaseapppage
	
	jp	os_func.go	; 10
	
os_func.boot:
	; adjust vector address (swap on bank A : $4000-$8000)
	res	7, h	; 8
	set 6, h	; 8
	
	; boot code page
	ld	a, $1F	; 7
	call	vect_flashpage_adjust	; 17 + ?
	
	; 97 T-states from here
os_func.go:
	; load correct ROM page to bank A (holds the bcall vector table)
	out	(map_bankA_port), a	; 11 + any hw swap delay
	
	; get routine address
	ld	e, (hl)	; 7
	inc	hl	; 6
	ld	d, (hl)	; 7
	inc	hl	; 6
	; get routine page
	ld	a, (hl)	; 7
	
	ex	de, hl	; 4
	
	; set proper rom page (no switch if rom page is null)
	or	a		; 4
	jp	z, $+5	; 10
	out	(map_bankA_port), a	; 11
	
; 	call	zp.throw_compat ; 11
	
	; check for null pointer (bcall not implemented...)
	; debug mode... comment out if needed
	ld	a, l	; 4
	or	h		; 4
	call	z, zp.throw_compat ; 11
	
	pop	af	; 10
	pop	de	; 10
	
	ex	(sp), hl	; 19
	ret	; 10

; 125 T-states
os_func_exit:
; code reached upon return from OS call
; stack frame :
;		* sp + 0 : room for return page
;		* sp + 2 : return address
	
	; restore ROM page
	ex	(sp), hl	; 19
	push	af	; 11
	
	ld	a, h	; 4
	out	(map_bankA_port), a	; 11
	
	pop	af	; 10
	
	pop	hl	; 10
	
	; advance return by 2 (skip the call vector address (.dw after rst 28h))
	ex	(sp), hl	; 19
	inc	hl	; 6
	inc	hl	; 6
	ex	(sp), hl	; 19
	
	; return to caller
	ret	;	10

; brief : find base app page
; input : a -> app page
; output : a -> base app page, CF set in case of error
vect_getbaseapppage:
	push	hl		; 11
	push	de		; 11
	push	bc		; 11
	ld	c, map_bankA_port ; 7
	in	b, (c)		; 
	
	push	af		; 11
	call	zp.hw_version ; 17 + ~80
	ld	hl, $4000	; 10
	ld	de, apppage_boundaries; 10
	offset_de		; 
	pop	af			; 10
	
vect_getbaseapppage.loop:
	out	(c), a
	push	af
	ld	a, (hl)
	cp	$80
	jr	nz, $+8
	inc	hl
	ld	a, (hl)
	cp	$0F
	jr	z, vect_getbaseapppage.found
	pop	af
	inc	a
	ex	de, hl
	cp	(hl)
	ex	de, hl
	jr	c, vect_getbaseapppage.loop
	
	; error : what code?
	out	(c), b
	pop	bc
	pop	de
	pop	hl
	scf
	ret

vect_getbaseapppage.found:
	pop	af
	out	(c), b
	pop	bc
	pop	de
	pop	hl
	or	a
	ret

apppage_boundaries:
	.db $18	; 83+BE
	.db $6A	; 83+SE
	.db $2A	; 84+BE
	.db $6A	; 84+SE

; brief : map a flash page to a memory bank A
; input : a -> flash page
; destroys : none
; note : flash page must be in BE range (00-1F), this routine is only here to
; provide hardware abstraction of "common" paging (1C : restricted, 1F : boot code, ...)
zp.setflashpage:
	call	vect_flashpage_adjust
	out	(map_bankA_port), a
	ret

; brief : adjust a flash page number in BE range to match calc model
; input : a -> flash page (00-1F)
; output : adjusted flash page (00-7F), CF set if no adjustment required, reset otherwise
; destroys : none
vect_flashpage_adjust:
	;; Set local page corresponding to given BE page
	;; Bit    7,in(2)  5,in(2)  0,in(21)
	;; ---------------------------------
	;; 83+BE  0        N/A      N/A
	;; 83+SE  1        0        1
	;; 84+BE  1        1        0
	;; 84+SE  1        1        1
	
	cp	$18
	ret	c
	push	bc
	ld	b, a
	in	a, (hw_port)
	and	$80
	jr	nz, $+6
	
	ld	a, b
	pop	bc
	scf
	ret
	
	in	a, (hw_se_port)
	and	1
	rrca
	rrca
	or	$20
	or	b
	pop	bc
	ret

; hl address of method on restricted page
restricted_syscall:
	; make room to save page
	push	hl
	
	push	hl
	push	bc
	push	af
	
	; save page in stack room
	in	a, (map_bankA_port)
	
	ld	hl, 6
	add	hl, sp
	ld	(hl), a
	
	; switch to page 1C (which may be 3C or 7C depending on model...)
	; hence the need for a proxy method
	ld	a, $1C
	call	zp.setflashpage
	
	pop	af
	pop	bc
	pop	hl
	
	; make the actual call
	call	zp.call_hl
	
	push	af
	push	hl
	
	; restore page
	ld	hl, 4
	add	hl, sp
	ld	a, (hl)
	out	(map_bankA_port), a
	
	pop	hl
	pop	af
	
	; remove save page from stack
	inc	sp
	inc	sp
	
	ret

restricted_syscall_raw:
	; switch to page 1C (which may be 3C or 7C depending on model...)
	; hence the need for a proxy method
	push	af
	push	bc
	ld	a, $1C
	call	zp.setflashpage
	pop	bc
	pop	af
	
	jp	(hl)

