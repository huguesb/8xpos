.nolist
; Copyright (c) 2009, Luc BRUANT aka fullmetalcoder.
;Redistribution and use in source and binary forms, with or without modification, are
;permitted provided that the following conditions are met:
;Redistributions of source code must retain the above copyright notice, this list of
;conditions and the following disclaimer.
;
;Redistributions in binary form must reproduce the above copyright notice, this list of
;conditions and the following disclaimer in the documentation and/or other materials
;provided with the distribution.
;
;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
;TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
;PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR
;CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
;OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.list

.nolist
; OS config file
#include "xos.inc"
; syscalls addresses
#include "xos.exp"
; library header file
#include "apps/gui.inc"
.list

#define t_dump call dump.pool

#define t_malloc(n,sz) ld bc, sz \ call zp.malloc \ ld (n*2 + slots), hl \ t_dump
#define t_free(n) ld hl, (n*2 + slots) \ call zp.free \ t_dump
#define t_realloc(n,sz) ld hl, (n*2 + slots) \ ld bc, sz \ call zp.realloc \ ld (n*2 + slots), hl \ t_dump

.org	prgm.start - 2
	.db magic.executable, 0
	

vat.test:
	; load VAT
	ld	hl, vat_dump
	call	vect_vat_load
	
	call	dump.vat
	
	; do something with that VAT
	
	ld	hl, vat.test.dummyappv
	call	vect_vat_find
	ld	hl, vat.test.dummyappv
	ld	bc, $0200
	call	c, vect_vat_create
	
	ld	hl, vat.test.dummyprog
	call	vect_vat_find
	ld	hl, vat.test.dummyprog
	ld	bc, $0200
	call	c, vect_vat_create
	
	call	dump.vat
	
	; save it back
	ld	hl, vat_dump
	jp	vect_vat_store


vat.test.dummyappv:
	.db tAppvar, "dummyappv", 0
vat.test.dummyprog:
	.db tLockedProg, "dummyprog", 0

; VAT dump struct :
;
;	* word : number of entries
;	* list of entries	
;
;	entry {
;		byte : type (as in VAT entry)
;		word : size of data
;		size bytes : data
;		byte : name length
;		nl bytes : name
;	}

; brief : fill VAT from a file and copy variable data to heap
; input : hl -> filename
; output : CF set if file not found
; destroys : a, bc, de, hl
vect_vat_load:
	push	hl
	ld	hl, $BFFF
	ld	(vat_start), hl
	ld	(vat_end), hl
	pop	hl
	
	call	zp.fopen
	ret	c
	
	; skip size bytes
	ld	de, 2
	call	zp.fseek
	
	; get number of entries
	call	zp.fgetc
	ld	c, a
	call	zp.fgetc
	ld	b, a
	
	or	c
	jr	z, vect_vat_load.end
	
vect_vat_load.loop:
	push	bc
	push	hl
	
	; get variable type
	call	zp.fgetc
	
	; start writing VAT entry
	ld	hl, (vat_end)
	
	ld	(hl), a
	dec	hl
	xor	a
	ld	(hl), a
	dec	hl
	ld	(hl), a
	dec	hl
	
	ex	(sp), hl
	
	; get data size
	call	zp.fgetc
	ld	c, a
	call	zp.fgetc
	ld	b, a
	
	ex	(sp), hl
	
	; alloc variable space
	push	hl
	call	zp.malloc
	pop	de
	ex	de, hl
	
	; write data address in VAT entry
	ld	(hl), e
	dec	hl
	ld	(hl), d
	dec	hl
	ld	(hl), 0
	dec	hl
	
	ex	(sp), hl
	
	; read data and write it into allocated space
	call	zp.fread
	
	; get name length and write it into VAT entry
	call	zp.fgetc
	cp	9
	jr	c, $+4
	ld	a, 8
	
	ld	b, a
	ex	(sp), hl
	ld	(hl), a
	dec	hl
	
	; get name and write it into VAT entry
	ex	(sp), hl
	call	zp.fgetc
	ex	(sp), hl
	ld	(hl), a
	dec	hl
	djnz	$-7
	
	; update VAT end ptr
	ld	(vat_end), hl
	
	pop	hl
	pop	bc
	dec	bc
	ld	a, b
	or	c
	jr	nz, vect_vat_load.loop
	
vect_vat_load.end:
	; close VAT file
	call	zp.fclose
	
vect_vat_store.cb:
	ret

; brief : store VAT data into a file and release VAT memory
; input : hl -> filename to use
; output : none
; destroys : a, bc, de, hl
vect_vat_store:
	; try open file
	push	hl
	call	zp.fopen
	pop	de
	jr	nc, vect_vat_store.exists
	ex	de, hl
	push	hl
	
	; create the file if it does not exist...
	; todo : figure out a proper size beforehand
	ld	bc, 16
	ld	ix, vect_vat_store.cb
	call	zp.file_create
	
	; primitive error handling
	call	c, zp.throw_memory
	
	pop	hl
	
	; open it
	call	zp.fopen
	ld	(vat_FILE), hl
	
	; dummy : size
	xor	a
	call	zp.fputc
	xor	a
	call	zp.fputc
	
	; dummy : number of entries
	xor	a
	call	zp.fputc
	xor	a
	call	zp.fputc
	
	jr	vect_vat_store.open
	
vect_vat_store.exists:
	; move to content
	ld	de, 4
	call	zp.fseek
	
vect_vat_store.open:
	ld	bc, 0
	ld	hl, (vat_start)
	
vect_vat_store.loop:
	; check for VAT end
	ld	de, (vat_end)
	cmp_hlde
	jr	z, vect_vat_store.end
	jr	c, vect_vat_store.end
	
	push	bc
	
	; get type
	ld	b, (hl)
	dec	hl
	
	; skip T2 and Version fields
	dec	hl
	dec	hl
	
	; get data ptr
	ld	e, (hl)
	dec	hl
	ld	d, (hl)
	dec	hl
	
	; check for archived var
	ld	a, (hl)
	dec	hl
	or	a
	jr	z, vect_vat_store.noarch
	
	; skip archived...
	ld	b, (hl)
	dec	hl
	
	dec	hl
	djnz	$-1
	
	pop	bc
	jr	vect_vat_store.loop
	
vect_vat_store.noarch:
	; put FILE ptr into top stack
	push	hl
	ld	hl, (vat_FILE)
	
	; write type
	ld	a, b
	push	de
	call	zp.fputc
	pop	de
	ex	(sp), hl
	
	; get data size
	push	hl
	ex	de, hl
	dec	hl
	dec	hl
	call	zp.block_size
	ld	b, h
	ld	c, l
	pop	hl
	
	ex	(sp), hl
	
	; reserve some space
; 	push	bc
; 	push	de
; 	ld	de, 12
;	ex	de, hl
;	add	hl, bc
;	ex	de, hl
; 	call	zp.fgrow
; 	pop	de
; 	pop	bc
	
	push	de
	push	de
	; write size
	ld	a, c
	call	zp.fputc
	ld	a, b
	call	zp.fputc
	
	; write data
	pop	de
	call	zp.fwrite
	pop	de
	
	ex	(sp), hl
	
	; release variable memory
	push	hl
	ex	de, hl
	call	zp.free
	pop	hl
	
	; get name length
	ld	a, (hl)
	dec	hl
	
	; bounds checking
	cp	9
	jr	c, $+4
	ld	a, 8
	
	; write name length
	ld	b, a
	ex	(sp), hl
	call	zp.fputc
	ex	(sp), hl
	
	; copy name of entry
	ld	a, (hl)
	dec	hl
	ex	(sp), hl
	call	zp.fputc
	ex	(sp), hl
	djnz	$-7
	
	; discard FILE ptr for now
	pop	af
	
	pop	bc
	inc	bc
	jr	vect_vat_store.loop
	
vect_vat_store.end:
	ld	hl, (vat_FILE)
	
	push	bc
	ld	de, 2
	call	zp.fseek
	pop	bc
	
	; write number of entries
	ld	a, c
	call	zp.fputc
	ld	a, b
	call	zp.fputc
	
	; clear variable
	ld	de, 0
	ld	(vat_FILE), de
	
	jp	zp.fclose

; brief : find a variable in VAT
; input : hl -> variable id (type + name)
; output : CF set on failure, a -> type | flags, hl -> VAT entry, b:de -> data ptr
; destroys : a, bc, de, hl
vect_vat_find:
	; save ix and load hl into ix
	push	hl
	ex	(sp), ix
	
	ld	hl, (vat_start)
	ld	de, (vat_end)
	ld	bc, -6
	
vect_vat_find.loop:
	; check for VAT end
	cmp_hlde
	jr	z, $+4
	jr	nc, $+6
	pop	ix
	scf
	ret
	
	; check for matching var type
	ld	a, (ix)
	cp	(hl)
	jr	nz, vect_vat_find.invalid
	
	push	hl
	
	; move to name and get length
	add	hl, bc
	ld	b, (hl)
	
	push	de
	
	; get back variable id
	push	ix
	pop	de
	inc	de
	
	; check for matching name
vect_vat_find.cmp:
	ld	a, (de)
	inc	de
	dec	hl
	cp	(hl)
	jr	nz, vect_vat_find.skip
	djnz	vect_vat_find.cmp
	
	pop	de
	pop	hl
	
	push hl
	
	; get type byte
	ld	a, (hl)
	; mask type byte and clear carry
	and	$1F
	
	; skip T2 and Version
	dec	hl
	dec	hl
	
	; get data ptr
	dec	hl
	ld	e, (hl)
	dec	hl
	ld	d, (hl)
	dec	hl
	ld	b, (hl)
	
	pop	hl
	
	pop	ix
	;or	a
	ret
	
vect_vat_find.skip:
	pop	de
	pop	hl
	
	; restore name offset
	ld	bc, -6
	
vect_vat_find.invalid:
	add	hl, bc
	
	; skip name
	scf
	ld	a, l
	sbc	a, (hl)
	ld	l, a
	jr	nc, vect_vat_find.loop
	dec	h
	jr	vect_vat_find.loop

; brief : create a variable in VAT and allocate memory
; input : hl -> variable id (type + name), bc -> size
; output : hl -> VAT entry, de -> data ptr
; destroys : a, bc
vect_vat_create:
	ld	de, (vat_end)
	
	push	de
	
	; write type byte in VAT entry
	ld	a, (hl)
	inc	hl
	ld	(de), a
	dec	de
	
	ex	de, hl
	
	; write T2 and Version bytes
	xor	a
	ld	(hl), a
	dec	hl
	ld	(hl), a
	dec	hl
	
	push	de
	push	hl
	
	; alloc memory
	inc	bc
	inc	bc
	call	zp.malloc
	
	; minimalistic error handling
	call	c, zp.throw_memory
	
	; init size bytes
	dec	bc
	dec	bc
	ld	(hl), c
	inc	hl
	ld	(hl), b
	dec	hl
	
	ex	de, hl
	pop	hl
	
	; write data address in VAT entry
	ld	(hl), e
	dec	hl
	ld	(hl), d
	dec	hl
	ld	(hl), 0
	dec	hl
	
	;pop	de
	;; ex (sp), de
	ex	de, hl
	ex	(sp), hl
; 	ex	de, hl
; 	
; 	ex	de, hl
	
	; compute name length
	call	zp.strlen
	
	;write name length
	ld	a, c
	
	; size check
	cp	9
	jr	c, $+5
	ld	a, 8
	
	ld	(de), a
	dec	de
	
	ld	b, a
	
	; write name to VAT entry
	ld	a, (hl)
	inc	hl
	ld	(de), a
	dec	de
	djnz	$-4
	
	ld	(vat_end), de
	
	; get back outputs
	pop	de
	pop	hl
	ret

; brief : removes a variable from VAT and release related memory
; input : hl -> VAT entry, b:de -> data ptr
; output : none
; destroys : a, bc, de, hl
vect_vat_del:
	; check for archive
	ld	a, b
	or	a
	ret	nz
	
	; release data
	push	hl
	ex	de, hl
	call	zp.free
	pop	hl
	
	; now update VAT (fill the gap in entries)
	
	push	hl
	
	; move to name length
	ld	bc, -6
	add	hl, bc
	
	; move to next entry : negative offset_hl (with carry)
	scf
	ld	a, l
	sbc	a, (hl)
	jr	nc, $+3
	dec	h
	
	; determine size of data to move
	push	hl
	ld	de, (vat_end)
	or	a
	sbc	hl, de
	ld	b, h
	ld	c, l
	pop	hl
	
	pop	de
	
	; removed entry is last : nothing to copy
	jr	z, $+4
	
	; move data
	ldir
	
	; update VAT end ptr
	ld	(vat_end), hl
	ret

; brief : insert memory in an existing variable's data
; input : hl -> size, de -> address within var data
; output : none
; destroys : a, bc, hl
vect_vat_insmem:
	; 1st : figure out where data start to realloc it...
	push	hl
	call	vect_find_chunk
	pop	bc
	call	c, zp.throw_memory
	
	; turn insertion address into offset
	ex	de, hl
	or	a
	sbc	hl, de
	ex	de, hl
	
	push	bc
	push	de
	
	; get block info
	push	bc
	dec	hl
	dec	hl
	call	zp.block_size
	pop	bc
	
	push	hl
	
	; compute new size
	add	hl, bc
	ld	b, h
	ld	c, l
	
	ex	de, hl
	
	; realloc memory
	call	zp.realloc
	
	call	c, zp.throw_memory
	
	; move data (de -> de + bc)
	
	; get back copy parameters
	pop	af
	pop	de
	pop	bc
	push	af
	
	ex	(sp), hl
	; compute number of bytes to displace
	or	a
	sbc	hl, de
	ex	(sp), hl
	
	; compute displacement pointers (src/dest)
	add	hl, de
	ld	d, h
	ld	e, l
	add	hl, bc
	ex	de, hl
	
	pop	bc
	
	; copy data
	ldir
	
	ret

; brief : removes memory from an existing variable's data
; input : hl -> address whithin var data, de -> amount to delete
; output : bc -> amount deleted
; destroys : a, hl
vect_vat_delmem:
	; 1st : figure out where data start to realloc it...
	push	de
	push	hl
	ex	de, hl
	call	vect_find_chunk
	call c, zp.throw
	
; 	; get block info
; 	dec	hl
; 	dec	hl
; 	call	zp.block_size
; 	
; 	; hl -> size
; 	; de -> content
; 	
; 	ld	b, h
; 	ld	c, l
; 	add	hl, de
; 	ex	de, hl
; 	
; 	ex	(sp), hl
; 	
; 	; bc -> size
; 	; de -> end
; 	; hl -> move dest (start)
; 	
; 	; move data
; 	
; 	pop	de
; 	pop	bc
; 	
; 	; compute new size
; 	or	a
; 	sbc	hl, bc
; 	ld	b, h
; 	ld	c, l
; 	
; 	ex	de, hl
; 	
; 	; realloc memory
; 	call	zp.realloc
; 	
; 	call	c, zp.throw_memory
	
	ret

; brief : find start of a memory chunk (in heap)
; input : de -> address within chunk
; output : CF set on failure, hl -> chunk start (realloc/free suitable)
; destroys : a, bc
vect_find_chunk:
	ld	hl, (os.malloc.start)
	
vect_find_chunk.loop:
	push	de
	call	zp.block_size
	ld	b, h
	ld	c, l
	pop	hl
	
	push	af
	; check for input_addr >= chunk_start
	cmp_hlde
	jr	c, vect_find_chunk.fail
	
	; check for input_addr < chunk_start + chunk_size
	ex	de, hl
	add	hl, bc
	ex	de, hl
	cmp_hlde
	jr	c, vect_find_chunk.ok
	
	pop	af
	
	ex	de, hl
	; loop if not at end
	jr	nc, vect_find_chunk.loop

vect_find_chunk.fail:
	pop	af
	scf
	ret

vect_find_chunk.ok:
	; adjust output
	ex	de, hl
	or	a
	sbc	hl, bc
	
	pop	af
	or	a
	ret

.echo "\nVAT : "
.echo $-vect_vat_load
.echo " bytes.\n"

vat_start:
	.dw	0
vat_end:
	.dw	0
vat_FILE:
	.dw	0

vat_dump:
	.db "compat-vat", 0

dump.vat:
	ld	hl, (vat_start)
	
dump.vat.loop:
	ld	de, (vat_end)
	cmp_hlde
	ret	z
	ret	c
	
	ld	b, 6
	ld	de, os.scrap
	
	call	zp.memdump
	dec	hl
	djnz	$-4
	
	ld	a, ':'
	ld	(de), a
	inc	de
	
	ld	b, (hl)
	dec	hl
	
	ld	a, (hl)
	ld	(de), a
	inc	de
	dec	hl
	djnz	$-4
	
	xor	a
	ld	(de), a
	
	push	hl
	ld	hl, os.scrap
	call	zp.cputs
	call	zp.cdisp
	call	zp.getch
	pop	hl
	jr	dump.vat.loop

; fileio.test:
; 	or	a
; 	ret	z
; 	dec	a
; 	ret	z
; 	
; 	push	hl
; 	
; 	call	zp.fopen
; 	ret	c
; 	ld	(fptr), hl
; 	
; 	; 02, 82:84B1, 00, 82:849D, 84:8010
; 	; 02, 84:84DA, 01, 82:849D, 84:8010
; 	; 02, 82:84B1, 00, 82:849D, 84:8010
; 	
; 	; 02, 82:84B1, 00, 82:849D, 84:800E
; 	
; 	call	dump.filehandle
; 	
; 	call	vect_fsize
; 	push	hl
; 	ld	de, os.scrap
; 	ld	h, b
; 	ld	l, c
; 	call	zp.htoa_word
; 	xor	a
; 	ld	(de), a
; 	ld	hl, os.scrap
; 	call	zp.cputs
; 	call	zp.cdisp
; 	call	zp.getch
; 	pop	hl
; ; 	
; ; 	call	dump.filehandle
; 	
; 	ex	(sp), hl
; 	
; 	call	zp.strnext
; 	ld	b, 4
; 	ex	de, hl
; 	call	zp.atoh
; ; 	call	dump_hl
; 	
; 	ex	de, hl
; 	pop	hl
; 	
; 	call	vect_fseek
; 	
; 	;call	dump.filehandle
; 	
; ; 	ld	de, 0
; ; 	call	vect_seek
; ; 	
; 	
; dump.loop:
; 	call	vect_ftell
; 	ex	de, hl
; 	call	dump_hl
; 	ex	de, hl
; 	
; ; 	call	dump.filehandle
; 	
; 	ld	de, os.scrap
; 	ld	bc, $50
; 	call	vect_fread
; 	
; 	push	hl
; 	ld	hl, os.scrap
; 	ld	de, os.console
; 	ld	b, $50
; 	call	zp.memdump
; 	inc	hl
; 	djnz	$-4
; 	call	zp.cdisp
; 	call	zp.getch
; 	pop	hl
; 	
; ; 	call	dump.filehandle
; 	
; 	call	vect_feof
; 	jr	nc, dump.loop
; 	
; 	call	vect_ftell
; 	ex	de, hl
; 	call	dump_hl
; 	ex	de, hl
; 	
; ; 	call	vect_fsize
; ; 	inc	bc
; ; 	inc	bc
; ; 	call	vect_fresize
; 	
; 	ld	de, str
; 	ld	bc, 11
; 	call	vect_fwrite
; 	
; ; 	ld	a, $99
; ; 	call	vect_fputc
; ; 	ld	a, $11
; ; 	call	vect_fputc
; ; 	
; 	ld	hl, (fptr)
; 	call	zp.fclose
; 	ret
; 
; str:
; 	.db "successful", 0
; 
; fptr:
; 	.dw	0

; 	; first test malloc/free/realloc
; malloc.test:
; 	
; 	t_malloc(0, $0100)
; 	t_malloc(1, $0100)
; 	t_malloc(2, $0100)
; 	t_malloc(3, $0100)
; 	t_free(1)
; 	t_free(2)
; 	t_malloc(1, $0200)
; 	t_realloc(0, $0200)
; 	t_free(3)
; 	t_realloc(1, $0300)
; 	
; 	t_free(1)
; 	t_free(0)
; 	
; 	ret
; 
; slots:
; 	.dw 0, 0, 0, 0

dump_hl:
	push	af
	push	de
	push	hl
	push	bc
	
	ld	de, os.scrap + 16
	call	zp.htoa_word
	ld	a, '@'
	ld	(de), a
	inc	de
	ld	hl, 8
	add	hl, sp
	deref_hl
	dec	hl
	dec	hl
	dec	hl
	call	zp.htoa_word
	xor	a
	ld	(de), a
	ld	hl, os.scrap + 16
	call	zp.cputs
	call	zp.cdisp
	call	zp.getch
	pop	bc
	pop	hl
	pop	de
	pop	af
	ret

; dump.pool:
; 	ld	hl, (os.malloc.mp_start)
; 	
; dump.pool.loop:
; 	call	zp.cscroll
; 	push	hl
; 	ld	hl, $0800
; 	ld	(os.curpos.col), hl
; 	pop	hl
; 	
; 	ld	d, (hl)
; 	inc	hl
; 	ld	e, (hl)
; 	inc	hl
; 	
; 	ld	a, $80
; 	and	d
; 	rlca
; 	add	a, '0'
; 	set	7, d
; 	
; 	push	de
; 	
; 	call	zp.cputch
; 	ld	a, ':'
; 	call	zp.cputch
; 	
; 	ex	de, hl
; 	or	a
; 	sbc	hl, de
; 	
; 	push	af
; 	
; 	ld	de, os.scrap
; 	call	zp.htoa_word
; 	xor	a
; 	ld	(de), a
; 	ld	hl, os.scrap
; 	call	zp.cprint
; 	
; 	pop	af
; 	pop	hl
; 	jr	z, $+4
; 	jr	nc, dump.pool.loop
; 	
; 	call zp.cdisp
; 	jp	zp.getch

;#include "lib/stdfileio.z80"

.end