.nolist
; Copyright (c) 2009, Luc BRUANT aka fullmetalcoder.
;Redistribution and use in source and binary forms, with or without modification, are
;permitted provided that the following conditions are met:
;Redistributions of source code must retain the above copyright notice, this list of
;conditions and the following disclaimer.
;
;Redistributions in binary form must reproduce the above copyright notice, this list of
;conditions and the following disclaimer in the documentation and/or other materials
;provided with the distribution.
;
;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
;TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
;PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR
;CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
;OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.list

.nolist
; OS config file
#include "xos.inc"
; syscalls addresses
#include "xos.exp"
; library header file
#include "apps/gui.inc"
.list

#define t_dump call dump.pool

#define t_malloc(n,sz) ld bc, sz \ call zp.malloc \ ld (n*2 + slots), hl \ t_dump
#define t_free(n) ld hl, (n*2 + slots) \ call zp.free \ t_dump
#define t_realloc(n,sz) ld hl, (n*2 + slots) \ ld bc, sz \ call zp.realloc \ ld (n*2 + slots), hl \ t_dump

.org	prgm.start - 2
	.db magic.executable, 0
	
	
fileio.test:
	or	a
	ret	z
	dec	a
	ret	z
	
	push	hl
	
	call	zp.fopen
	ret	c
	ld	(fptr), hl
	
; 	call	vect_fsize
; 	push	hl
; 	ld	de, os.scrap
; 	ld	h, b
; 	ld	l, c
; 	call	zp.htoa_word
; 	xor	a
; 	ld	(de), a
; 	ld	hl, os.scrap
; 	call	zp.cputs
; 	call	zp.cdisp
; 	call	zp.getch
; 	pop	hl
; 	
; 	call	dump.filehandle
	
	ex	(sp), hl
	
	call	zp.strnext
	ld	b, 4
	ex	de, hl
	call	zp.atoh
; 	call	dump_hl
	
	ex	de, hl
	pop	hl
	
	call	vect_fseek
	
	;call	dump.filehandle
	
; 	ld	de, 0
; 	call	vect_seek
; 	
	
dump.loop:
	call	vect_ftell
	ex	de, hl
	call	dump_hl
	ex	de, hl
	
; 	call	dump.filehandle
	
	ld	de, os.scrap
	ld	bc, $50
	call	vect_fread
	
	push	hl
	ld	hl, os.scrap
	ld	de, os.console
	ld	b, $50
	call	zp.memdump
	inc	hl
	djnz	$-4
	call	zp.cdisp
	call	zp.getch
	pop	hl
	
; 	call	dump.filehandle
	
	call	vect_feof
	jr	nc, dump.loop
	
	call	vect_ftell
	ex	de, hl
	call	dump_hl
	ex	de, hl
	
; 	ld	a, $99
; 	call	vect_fputc
; 	ld	a, $11
; 	call	vect_fputc
; 	
	ld	hl, (fptr)
	call	zp.fclose
	ret

fptr:
	.dw	0

; 	; first test malloc/free/realloc
; malloc.test:
; 	
; 	t_malloc(0, $0100)
; 	t_malloc(1, $0100)
; 	t_malloc(2, $0100)
; 	t_malloc(3, $0100)
; 	t_free(1)
; 	t_free(2)
; 	t_malloc(1, $0200)
; 	t_realloc(0, $0200)
; 	t_free(3)
; 	t_realloc(1, $0300)
; 	
; 	t_free(1)
; 	t_free(0)
; 	
; 	ret
; 
; slots:
; 	.dw 0, 0, 0, 0

dump_hl:
	push	af
	push	de
	push	hl
	push	bc
	
	ld	de, os.scrap + 16
	call	zp.htoa_word
	ld	a, '@'
	ld	(de), a
	inc	de
	ld	hl, 8
	add	hl, sp
	deref_hl
	dec	hl
	dec	hl
	dec	hl
	call	zp.htoa_word
	xor	a
	ld	(de), a
	ld	hl, os.scrap + 16
	call	zp.cputs
	call	zp.cdisp
	call	zp.getch
	pop	bc
	pop	hl
	pop	de
	pop	af
	ret

dump.pool:
	ld	hl, (os.malloc.mp_start)
	
dump.pool.loop:
	call	zp.cscroll
	push	hl
	ld	hl, $0800
	ld	(os.curpos.col), hl
	pop	hl
	
	ld	d, (hl)
	inc	hl
	ld	e, (hl)
	inc	hl
	
	ld	a, $80
	and	d
	rlca
	add	a, '0'
	set	7, d
	
	push	de
	
	call	zp.cputch
	ld	a, ':'
	call	zp.cputch
	
	ex	de, hl
	or	a
	sbc	hl, de
	
	push	af
	
	ld	de, os.scrap
	call	zp.htoa_word
	xor	a
	ld	(de), a
	ld	hl, os.scrap
	call	zp.cprint
	
	pop	af
	pop	hl
	jr	z, $+4
	jr	nc, dump.pool.loop
	
	call zp.cdisp
	jp	zp.getch

vat.test:
	call	load
	ret	c
	call	vect_fsize
	push	hl
	call	zp.malloc
	ld	(vat_loc), hl
	ex	de, hl
	pop	hl
	call	vect_fread
	
	; do something with that VAT
	
	
	; save it back to file...
	ld	bc, 
	push	bc
	call	vect_fresize
	ld	de, 0
	call	vect_fseek
	ld	de, (vat_loc)
	pop	bc
	call	vect_fwrite
	jp	save

load:
	ld	hl, vat_dump
	call	zp.fopen
	ld	(vat_FILE), hl
	ret	nc
	ld	hl, vat_dump
	ld	bc, 
	call	zp.file_create
	jr	nc, load
	ret

save:
	ld	hl, (vat_FILE)
	ld	bc, 
	call	vect_fresize
	
	ld	de, 
	call	vect_fwrite
	jp	zp.fclose

vat_loc:
	.dw 0

vat_FILE:
	.dw	0

vat_dump:
	.db "compat-vat", 0

#include "lib/stdfileio.z80"

.end