.nolist
; Copyright (c) 2009, Luc BRUANT aka fullmetalcoder.
;Redistribution and use in source and binary forms, with or without modification, are
;permitted provided that the following conditions are met:
;Redistributions of source code must retain the above copyright notice, this list of
;conditions and the following disclaimer.
;
;Redistributions in binary form must reproduce the above copyright notice, this list of
;conditions and the following disclaimer in the documentation and/or other materials
;provided with the distribution.
;
;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
;TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
;PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR
;CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
;OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.list

.nolist
#include "xos.inc"
#include "xos.exp"
.list

PAGE = $1C

.org $4000

vect_console_core:	.export	vect_console_core
	; slow speed
	xor	a
	out	(cpu_speed_port), a
	
; 	; enable silent link
; 	ld	hl, os.flags + osf.silentlink
; 	set silent_on, (hl)
	
	; restore default keymap just in case...
	ld	hl, 0
	ld	(os.keymap.normal), hl
	ld	(os.keymap.shift), hl
	ld	(os.keymap.alpha), hl
	
	; reset command recall index
	;ld	a, $FF
	dec	a
	ld	(os.command_mem + 3), a
	ei
	
	; clear command buffer
 	ld	hl, os.command
 	ld	de, os.command + 1
 	ld	(hl), 0
 	ld	bc, 128
 	ldir
 	
	; show console (in case a previous command left garbage on screen)
	call	zp.credraw
	call	zp.cdisp
	
	; wait for input
	ld	a, 128
	ld	hl, os.command
	ld	(os.command_buf), hl
	ld	(os.command_buf + 2), a
	
	ld	ix, zp.console.callback
	call	zp.cgets
	
; 	; disable silent link
; 	ld	hl, os.flags + osf.silentlink
; 	res silent_on, (hl)
	
	call	vect_memorize_command
	
	; remove command from display
	ld	a, CMD_PANE
	call	zp.clrline
	call	zp.displine
	
	; "tokenize" : modify the buffer
	ld	hl, os.command
	call	zp.tokenize
	
	push	af
	
	; find the command invoked
	
	ld	de, os.command
	ld	hl, command_mnemonics
	call	zp.findstr
	
	jr	z, zp.console.exec 

	pop	af
	
	ld	hl, str_esyntax1
	ld	de,	os.scrap
	ld	bc, 10
	ldir
	
	ld	hl, os.command
	call	zp.strcpy
	dec	de
	
	ld	hl, str_esyntax2
	ld	bc, 3
	ldir
	
	ld	hl, os.scrap
	call	zp.cputs
	jp		zp.cdisp

; bc : command index
; de : command parameters
zp.console.exec:
	ld	hl, command_pointers
	
	; bc holds command index but pointers are 2 bytes
	add	hl, bc
	add	hl, bc
	
	; deref hl
	deref_hl
	
	; adjust arguments (skip command)
	ld	de, os.command
	ex	de, hl
	call	zp.strnext
	ex	de, hl
	
	pop	af
	
	; adjust arg count
	dec	a
	
	; exec command
	;	hl : command address
	;	de : command parameters (stringlist)
	;	a  : number of parameters
	
	push	hl
	ex	de, hl
	ret

; brief : handle special keypresses in console input
; note : must preserve all registers... (callee save)
zp.console.callback:
	cp	k_up
	jr	z, zp.console.cb_up
	cp	k_down
	jr	z, zp.console.cb_down
	or	a
	ret

zp.console.cb_up:
	push	af
	ld	a, (os.command_mem + 3)
	inc	a
	call	vect_recall_command
	pop	af
	scf
	ret

zp.console.cb_down:
	push	af
	ld	a, (os.command_mem + 3)
	cp	$FF
	jr	z, zp.console.cb_down.clear
	or	a
	jr	z, zp.console.cb_down.clear
	dec	a
	call	vect_recall_command
	pop	af
	scf
	ret

zp.console.cb_down.clear:
	ld	a, $FF
	ld	(os.command_mem + 3), a
	inc	a
	
	; clear command buffer
 	ld	hl, os.command
 	ld	de, os.command + 1
 	ld	(hl), a
 	ld	bc, 128
	push	hl
 	ldir
	pop	hl
	ld	e, a
	pop	af
	scf
	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; here lies all data that is exclusively meant for kernel-space use
; (NOT font data for instance) and/or which is used rarely enough that
; an extra page swap is affordable
;
; NOTE : it must be exported (using TASM .export directive) to be
; reachable from the rest of the OS
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; console help :
;
; Console help
; <   topic name   >
; Details :

; brief : show tabbed texts as in console help
; input : hl -> data
; output : none
; destroys :
vect_show_tabbed_texts:	.export vect_show_tabbed_texts
	push	hl
	call	zp.clrscr
	pop	hl
	ld	bc, $0000
	call	zp.puts_con
	xor	a
	call	zp.invline
	ld	d, a
	ld	e, a
	ld	b, a
	ld	c, (hl)
	inc	hl
vect_stt.update:
	push	hl
	push	de
	push	bc
	
	push	hl
	push	bc
	push	de
	
	; save title line
	ld	hl, (os.vbuf_addr)
	ld	de, os.scrap
	ld	bc, 12*7
	push	hl
	push	de
	push	bc
	ldir
	
	; clear screen
	call	zp.clrscr
	
	; restore title line
	pop	bc
	pop	hl
	pop	de
	ldir
	
	pop	de
	pop	bc
	pop	hl
	
	; display entry name, centered
	ld	a, b
	add	a, a
	offset_hl
	deref_hl
	call	zp.strlen
	ld	a, 24
	sub	c
	rra
	ld	c, a
	ld	b, $07
	call	zp.puts_con
	
	; display text
	add	hl, de
	ld	d, 8*24
	ld	bc, $1000
	call	zp.putsn_con
	
	; display arrows if needed
	pop	bc
	push	bc
	ld	a, b
	or	a
	ld	bc, $0700
	ld	a, '<'
	call	nz, zp.putch_con
	pop	bc
	push	bc
	ld	a, b
	inc	a
	cp	c
	ld	bc, $0717
	ld	a, '>'
	call	c, zp.putch_con
	
	call	zp.vbufdisp
	
	pop	bc
	pop	de
	pop	hl
	
vect_stt.loop:
	call	zp.getch
	
	cp	k_left
	jr	z, vect_stt.prev
	cp	k_right
	jr	z, vect_stt.next
	cp	k_up
	jr	z, vect_stt.scroll_up
	cp	k_down
	jr	z, vect_stt.scroll_down
	cp	'q'
	ret	z
	cp	'Q'
	ret	z
	cp	k_enter
	ret	z
	jr	vect_stt.loop

vect_stt.prev:
	ld	a, b
	or	a
	jr	z, vect_stt.loop
	dec	b
	jp	vect_stt.update

vect_stt.next:
	ld	a, b
	inc	a
	cp	c
	jr	nc, vect_stt.loop
	inc	b
	jp	vect_stt.update

vect_stt.scroll_up:
	ld	a, d
	or	e
	jr	z, vect_stt.loop
	push	hl
	ld	hl, -24
	add	hl, de
	ex	de, hl
	pop	hl
	jp	vect_stt.update

vect_stt.scroll_down:
	push	bc
	push	hl
	ld	a, b
	add	a, a
	offset_hl
	deref_hl
	add	hl, de
	call	zp.strlen
	ld	hl, 24*8
	cmp_hlbc
	ld	hl, 24
	jr	nc,	$+4
	add	hl, de
	ex	de, hl
	pop	hl
	pop	bc
	jp	nc, vect_stt.update
	jr	vect_stt.loop

os.libs1C:

#include "lib/protports.z80"
#include "lib/commands.z80"
#include "lib/flash.z80"
#include "lib/primitives_p.z80"

.echo	"Libs : "
.echo	$-os.libs1C
.echo	" bytes used\n"

os.commands1C:

#include "commands/tilp.z80"
#include "commands/base.z80"
#include "commands/fs.z80"

.echo	"Commands : "
.echo	$-os.commands1C
.echo	" bytes used\n"

os.data1C:

str_esyntax1	.text	"Unknown: \"\000"
str_esyntax2	.text	"\".\000"

; command table :
;	* list of mnemonics for CLI lookup
;	* list of addresses for execution
command_mnemonics:
	.db "reboot", 0
	.db "host", 0
	.db "help", 0
	.db "cls", 0
;	.db "info", 0
	.db "list", 0
	.db "del", 0
	.db "mem", 0
	.db "run", 0
	.db "hex", 0
	.db "chronos", 0
	.db "touch", 0
	.db 0

command_pointers:
	.dw cmd_REBOOT
	.dw zp.host
	.dw cmd_HELP
	.dw cmd_CLS
;	.dw cmd_INFO
	.dw cmd_LIST
	.dw cmd_DEL
	.dw cmd_MEM
	.dw zp.run
	.dw zp.hexedit
	.dw cmd_CHRONOS
	.dw cmd_TOUCH

; console is 24 char wide : occupy it all
str_exception:	.export	str_exception
	.db	"EX  -                   "     ;1
	.db	"AF      BC      DE      "     ;2
	.db	"HL      IX      IY      "     ;3
	.db	"SP      PC      IR      "     ;4
	.db	"Stack Dump:             ", 0  ;5
		                               ;8
		;012345678901234567890123

str_ecreate:	.export	str_ecreate
	.db	"Can't Create File\000" ; don't ask me... looks like tasm fucks up when string literals end
str_elocate:	.export	str_elocate
	.db	"Can't Locate File\000" ; with 'e' and discard the zero terminator unless it is added that way...
str_elink:	.export	str_elink
	.db	"Transmission Error", 0
str_eexist:	.export	str_eexist
	.db	"File Exists", 0
str_emem:	.export	str_emem
	.db	"Out of Memory", 0
str_echecksum:	.export	str_echecksum
	.db	"Bad Link Checksum", 0
str_ecompat:	.export	str_ecompat
	.db "Compat Layer Error", 0
str_eunhandled:	.export	str_eunhandled
	.db	"  UNHANDLED  EXCEPTION ", 0
		;012345678901234567890123

; console help texts
help.data:	.export help.data
	.db	"Console Help", 0
	.db	9
	.dw	help.reboot
	.dw help.host
	.dw help.cls
	.dw help.info
	.dw	help.list
	.dw help.del
	.dw help.mem
	.dw help.run
	.dw help.chronos

	    ;012345678901234567890123
help.reboot:
	.db "reboot", 0
	.db "Reboots the calculator.", 0

help.host:
	.db "host", 0
	.db "Calculator enters host\nmode\n"
	.db "In host mode the calc\n"
	.db "can communicate with PC\n"
	.db "to exchange files"
	.db 0

help.cls:
	.db "cls", 0
	.db "Clear console screen", 0

help.info:
	.db "info", 0
	.db "Access OS info screen", 0

help.list:
	.db "list", 0
	.db "List filesystem contents", 0

help.del:
	.db "del", 0
	.db "Deletes a file.", 0

help.mem:
	.db "mem", 0
	.db "Display memory info", 0

help.run:
	.db "run", 0
	.db "Run an executable file\n"
	.db "The file must be a valid"
	.db "XOS executable (see SDK)"
	.db 0

help.chronos:
	.db "chronos", 0
	.db "Start a timer\n"
	.db "The timer will measure\n"
	.db "elapsed time in milli-\n"
	.db "seconds until you press\n"
	.db "[MODE] to exit at which\n"
	.db "point it will display\n"
	.db "elapsed time as a 32bit\n"
	.db "hexadecimal value."
	.db 0

; use table to allow maximum sotred precision to change seamlessly
fp.consts:		.export	fp.consts
	.dw	fp.0
	.dw	fp.1
	.dw	fp.e
	.dw	fp.ln10
	.dw	fp.ln2

; some constants : standard precision (TIOS) is 14 decimal places, 30 are stored for extra precision
; in some algorithms and in case users wish to increase the precision of fp math
fp.0:
	.db $00, $80, $00, $00, $00, $00, $00, $00, $00, 	$00, $00, $00, $00, $00, $00, $00 ;, $00
fp.1:
	.db $00, $80, $10, $00, $00, $00, $00, $00, $00, 	$00, $00, $00, $00, $00, $00, $00 ;, $00
fp.e:
	.db $00, $80, $27, $18, $28, $18, $28, $45, $90, 	$45, $23, $53, $60, $28, $74, $71 ;, $35
fp.pi:
	.db $00, $80, $31, $41, $59, $26, $53, $58, $97, 	$93, $23, $84, $62, $64, $33, $83 ;, $28
fp.ln10:
	.db $00, $80, $23, $02, $58, $50, $92, $99, $40, 	$45, $68, $40, $17, $99, $14, $54 ;, $68
fp.ln2:
	.db $00, $7F, $69, $31, $47, $18, $05, $59, $94, 	$53, $09, $41, $72, $32, $12, $14 ;, $58
; ; CORDIC table for ln/exp
; fp.ln1.1:
; 	.db $00, $7E, $95, $31, $01, $79, $80, $43, $24, 	$86, $00, $43, $95, $21, $23, $28, $07
; fp.ln1.01:
; 	.db $00, $7D, $99, $50, $33, $08, $53, $16, $80, 	$82, $84, $82, $15, $35, $75, $44, $26
; fp.ln1.001:
; 	.db $00, $7C, $99, $95, $00, $33, $30, $83, $53, 	$31, $66, $80, $93, $98, $92, $05, $35
; fp.ln1.0001:
; 	.db $00, $7C, $99, $99, $50, $00, $33, $33, $08, 	$33, $53, $33, $16, $66, $80, $95, $11
; fp.ln1.0001:
; 	.db $00, $7C, $99, $99, $50, $00, $33, $33, $08, 	$33, $53, $33, $16, $66, $80, $95, $11

; √2
; 	≈ 1.41421 35623 73095 04880 16887 24209 69807
; √3
; 	≈ 1.73205 08075 68877 29352 74463 41505 87236
; √5
; 	≈ 2.23606 79774 99789 69640 91736 68731 27623

#include "data/font_con.inc"
;#include "data/font_6x8.inc"
#include "data/83p_6x8.inc"
;#include "data/font_var.inc"
#include "data/83p_var.inc"

.echo	"Data : "
.echo	$-os.data1C
.echo	" bytes used\n"

.export	vect_forget_commands
.export	vect_memorize_command
.export	vect_recall_command

.export	vect_flashwrite
.export	vect_flasherase

.export	vect_drawicon

.export	cmd_REBOOT
.export	cmd_HELP
.export	cmd_CLS
.export	cmd_TOUCH
.export	cmd_DEL
.export	cmd_MEM
.export	cmd_LIST
.export	cmd_CHRONOS
.export	zp.host

.export	os.font_con
.export	os.font_6x8
.export	os.font_var

#if $ > $8000
!!!
.echo "Page 1C is too large...\n\n"
#endif

.echo	"\nPage 1C: "
.echo	$-$4000
.echo	" bytes used\t"
.echo	(($-$4000)*100)/$4000
.echo	"% filled\n"

.end
